package com.broadcast;

import java.io.*;
import java.net.*;

public class BroadcastSender {

    public static void main(String[] args) {
        String filePath = "E:\\xulyanh.pdf"; // ƒê∆∞·ªùng d·∫´n t·ªáp mu·ªën chia s·∫ª
        int udpPort = 12345;                // C·ªïng g·ª≠i broadcast
        int tcpPort = 23456;                // C·ªïng truy·ªÅn t·ªáp

        try {
            File file = new File(filePath);
            if (!file.exists()) {
                System.err.println("‚ùå File kh√¥ng t·ªìn t·∫°i: " + filePath);
                return;
            }

            String fileName = file.getName();
            long fileSize = file.length();

            // ƒê·∫∑t IP tƒ©nh c·ªßa m√°y th·∫≠t (Windows) - S·ª≠a l·∫°i
            String localIP = "192.168.1.9"; // Thay IP n√†y b·∫±ng IP c·ªßa m√°y Windows

            // G·ª≠i th√¥ng ƒëi·ªáp broadcast: T√™nFile;K√≠chTh∆∞·ªõc;IP;C·ªïngTCP
            String message = fileName + ";" + fileSize + ";" + localIP + ";" + tcpPort;
            byte[] buffer = message.getBytes();

            // G·ª≠i qua UDP broadcast
            DatagramSocket udpSocket = new DatagramSocket();
            udpSocket.setBroadcast(true);
            InetAddress broadcastAddress = InetAddress.getByName("192.168.1.255");

            DatagramPacket packet = new DatagramPacket(buffer, buffer.length, broadcastAddress, udpPort);
            udpSocket.send(packet);
            System.out.println("üì¢ ƒê√£ g·ª≠i broadcast th√¥ng b√°o t·ªáp tin!");
            udpSocket.close();

            // B·∫Øt ƒë·∫ßu TCP Server
            ServerSocket serverSocket = new ServerSocket(tcpPort);
            System.out.println("üß© ƒêang ch·ªù client y√™u c·∫ßu t·∫£i file...");

            while (true) {
                Socket clientSocket = serverSocket.accept();
                System.out.println("üîÅ Client ƒë√£ k·∫øt n·ªëi: " + clientSocket.getInetAddress());

                // Thi·∫øt l·∫≠p timeout cho socket
                clientSocket.setSoTimeout(10000); // 10 gi√¢y

                new Thread(() -> handleClient(clientSocket, file)).start();
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // G·ª≠i file cho client
    private static void handleClient(Socket clientSocket, File file) {
        try {
            FileInputStream fis = new FileInputStream(file);
            OutputStream os = clientSocket.getOutputStream();

            byte[] fileBuffer = new byte[4096];
            int bytesRead;

            while ((bytesRead = fis.read(fileBuffer)) != -1) {
                os.write(fileBuffer, 0, bytesRead);
            }

            os.flush();
            fis.close();
            clientSocket.close();
            System.out.println("‚úÖ ƒê√£ g·ª≠i file xong cho: " + clientSocket.getInetAddress());

        } catch (SocketTimeoutException e) {
            System.err.println("‚è∞ TIMEOUT: Client kh√¥ng ph·∫£n h·ªìi k·ªãp - " + clientSocket.getInetAddress());
            try {
                clientSocket.close();
            } catch (IOException ex) {
                ex.printStackTrace();
            }

        } catch (IOException e) {
            System.err.println("‚ùå L·ªói khi g·ª≠i file cho client: " + clientSocket.getInetAddress());
            e.printStackTrace();
        }
    }
}
